@echo off
chcp 65001 >nul
echo 正在创建喵咒·AI Spellbook项目结构...

REM 创建主目录结构
@REM mkdir pormula 2>nul
@REM cd pormula

REM 创建子目录结构
mkdir app 2>nul
mkdir app\web 2>nul
mkdir app\web\css 2>nul
mkdir app\web\js 2>nul
mkdir app\web\assets 2>nul
mkdir app\backend 2>nul
mkdir app\backend\routes 2>nul
mkdir app\backend\data 2>nul
mkdir app\backend\utils 2>nul
mkdir app\config 2>nul

echo 目录结构创建完成，正在生成文件...

REM 创建 lzc-build.yml
(
echo name: 喵咒·AI Spellbook
echo version: 1.0.0
echo description: 以表达公式的形式组合关键词句片段，形成更好的提示词
echo.
echo buildscript: ^|
echo   cd app/backend
echo   npm install --production
echo   cd ../..
echo.
echo contentdir: app
echo outputfile: pormula.lpk
) > lzc-build.yml

REM 创建 lzc-manifest.yml
(
echo name: 喵咒·AI Spellbook
echo package: cloud.lazycat.app.aispellbook
echo version: 1.0.0
echo description: 以表达公式的形式组合关键词句片段，形成更好的提示词
echo author: LazyCAT Team
echo.
echo application:
echo   subdomain: aispellbook
echo   workdir: /lzcapp/pkg/content/
echo.  
echo   routes:
echo     # 静态文件路由
echo     - /=file:///lzcapp/pkg/content/web/
echo     - /css/=file:///lzcapp/pkg/content/web/css/
echo     - /js/=file:///lzcapp/pkg/content/web/js/
echo     - /assets/=file:///lzcapp/pkg/content/web/assets/
echo.    
echo   upstreams:
echo     # API后端服务
echo     - location: /api/
echo       workdir: /lzcapp/pkg/content/backend/
echo       backend: http://127.0.0.1:3000/api/
echo       backend_launch_command: ^|
echo         cd /lzcapp/pkg/content/backend
echo         apk update
echo         apk add nodejs npm
echo         npm install
echo         node server.js
) > lzc-manifest.yml

REM 创建 app/web/index.html
(
echo ^<!DOCTYPE html^>
echo ^<html lang="zh-CN"^>
echo ^<head^>
echo     ^<meta charset="UTF-8"^>
echo     ^<meta name="viewport" content="width=device-width, initial-scale=1.0"^>
echo     ^<title^>喵咒·AI Spellbook^</title^>
echo     ^<link rel="stylesheet" href="css/style.css"^>
echo ^</head^>
echo ^<body^>
echo     ^<div class="container"^>
echo         ^<header class="header"^>
echo             ^<div class="logo"^>
echo                 ^<h1^>🐱 喵咒·AI Spellbook^</h1^>
echo                 ^<p^>以表达公式的形式组合关键词句片段，形成更好的提示词^</p^>
echo             ^</div^>
echo         ^</header^>
echo.
echo         ^<main class="main-content"^>
echo             ^<div class="formula-builder"^>
echo                 ^<h2^>公式构建器^</h2^>
echo                 ^<div class="formula-input"^>
echo                     ^<input type="text" id="formulaName" placeholder="输入公式名称..." class="formula-name-input"^>
echo                     ^<textarea id="formulaContent" placeholder="在此输入您的提示词公式..." class="edit-textarea"^>^</textarea^>
echo                     ^<div class="edit-actions"^>
echo                         ^<button onclick="saveFormula(^)" class="btn btn-primary"^>保存公式^</button^>
echo                         ^<button onclick="clearFormula(^)" class="btn btn-secondary"^>清空^</button^>
echo                     ^</div^>
echo                 ^</div^>
echo             ^</div^>
echo.
echo             ^<div class="formula-list"^>
echo                 ^<h2^>已保存的公式^</h2^>
echo                 ^<div id="formulaContainer" class="formula-container"^>
echo                     ^<!-- 公式列表将在这里动态生成 --^>
echo                 ^</div^>
echo             ^</div^>
echo         ^</main^>
echo     ^</div^>
echo.
echo     ^<script src="js/minidb.js"^>^</script^>
echo     ^<script src="js/app.js"^>^</script^>
echo ^</body^>
echo ^</html^>
) > app\web\index.html

REM 创建 app/web/test.html
(
echo ^<!DOCTYPE html^>
echo ^<html lang="zh-CN"^>
echo ^<head^>
echo     ^<meta charset="UTF-8"^>
echo     ^<meta name="viewport" content="width=device-width, initial-scale=1.0"^>
echo     ^<title^>测试页面 - 喵咒·AI Spellbook^</title^>
echo     ^<link rel="stylesheet" href="css/style.css"^>
echo ^</head^>
echo ^<body^>
echo     ^<div class="container"^>
echo         ^<header class="header"^>
echo             ^<h1^>🧪 测试页面^</h1^>
echo             ^<a href="index.html" class="btn btn-secondary"^>返回主页^</a^>
echo         ^</header^>
echo.
echo         ^<main class="main-content"^>
echo             ^<div class="test-section"^>
echo                 ^<h2^>API 测试^</h2^>
echo                 ^<button onclick="testAPI(^)" class="btn btn-primary"^>测试 API 连接^</button^>
echo                 ^<div id="testResult" class="test-result"^>^</div^>
echo             ^</div^>
echo.
echo             ^<div class="test-section"^>
echo                 ^<h2^>数据库测试^</h2^>
echo                 ^<button onclick="testDatabase(^)" class="btn btn-primary"^>测试数据库连接^</button^>
echo                 ^<div id="dbTestResult" class="test-result"^>^</div^>
echo             ^</div^>
echo         ^</main^>
echo     ^</div^>
echo.
echo     ^<script src="js/test.js"^>^</script^>
echo ^</body^>
echo ^</html^>
) > app\web\test.html

REM 创建 app/web/css/style.css
(
echo /* 喵咒·AI Spellbook 主样式文件 */
echo.
echo /* CSS 变量定义 */
echo :root {
echo   --primary-color: #00aabb;
echo   --secondary-color: #ff6b6b;
echo   --accent-color: #4ecdc4;
echo   --success-color: #51cf66;
echo   --warning-color: #ff9800;
echo   --error-color: #ff5252;
echo   --bg-primary: #1a1a1a;
echo   --bg-secondary: #2d2d2d;
echo   --bg-dark: #0f0f0f;
echo   --bg-light: #3a3a3a;
echo   --card-bg: #252525;
echo   --text-primary: #ffffff;
echo   --text-secondary: #b0b0b0;
echo   --text-muted: #808080;
echo   --border-color: #404040;
echo   --border-radius: 8px;
echo   --spacing-xs: 4px;
echo   --spacing-sm: 8px;
echo   --spacing-md: 16px;
echo   --spacing-lg: 24px;
echo   --spacing-xl: 32px;
echo   --font-family: 'Microsoft YaHei', 'PingFang SC', 'Helvetica Neue', Arial, sans-serif;
echo   --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.3^);
echo   --shadow-md: 0 4px 8px rgba(0, 0, 0, 0.4^);
echo   --shadow-lg: 0 8px 16px rgba(0, 0, 0, 0.5^);
echo }
echo.
echo /* 基础重置 */
echo * {
echo   margin: 0;
echo   padding: 0;
echo   box-sizing: border-box;
echo }
echo.
echo body {
echo   font-family: var(--font-family^);
echo   background-color: var(--bg-primary^);
echo   color: var(--text-primary^);
echo   line-height: 1.6;
echo   min-height: 100vh;
echo }
echo.
echo /* 容器布局 */
echo .container {
echo   max-width: 1200px;
echo   margin: 0 auto;
echo   padding: var(--spacing-md^);
echo }
echo.
echo /* 头部样式 */
echo .header {
echo   text-align: center;
echo   margin-bottom: var(--spacing-xl^);
echo   padding: var(--spacing-lg^);
echo   background: linear-gradient(135deg, var(--primary-color^), var(--accent-color^)^);
echo   border-radius: var(--border-radius^);
echo   box-shadow: var(--shadow-md^);
echo }
echo.
echo .header h1 {
echo   font-size: 2.5rem;
echo   margin-bottom: var(--spacing-sm^);
echo   text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3^);
echo }
echo.
echo .header p {
echo   font-size: 1.1rem;
echo   opacity: 0.9;
echo }
echo.
echo /* 主内容区域 */
echo .main-content {
echo   display: grid;
echo   grid-template-columns: 1fr 1fr;
echo   gap: var(--spacing-xl^);
echo   margin-bottom: var(--spacing-xl^);
echo }
echo.
echo @media (max-width: 768px^) {
echo   .main-content {
echo     grid-template-columns: 1fr;
echo   }
echo }
echo.
echo /* 卡片样式 */
echo .formula-builder,
echo .formula-list {
echo   background-color: var(--card-bg^);
echo   border-radius: var(--border-radius^);
echo   padding: var(--spacing-lg^);
echo   box-shadow: var(--shadow-md^);
echo   border: 1px solid var(--border-color^);
echo }
echo.
echo .formula-builder h2,
echo .formula-list h2 {
echo   color: var(--primary-color^);
echo   margin-bottom: var(--spacing-md^);
echo   font-size: 1.5rem;
echo   border-bottom: 2px solid var(--primary-color^);
echo   padding-bottom: var(--spacing-sm^);
echo }
echo.
echo /* 按钮样式 */
echo .btn {
echo   padding: var(--spacing-sm^) var(--spacing-md^);
echo   border: none;
echo   border-radius: var(--border-radius^);
echo   cursor: pointer;
echo   font-size: 0.9rem;
echo   font-weight: 500;
echo   transition: all 0.3s ease;
echo   text-decoration: none;
echo   display: inline-block;
echo   text-align: center;
echo }
echo.
echo .btn-primary {
echo   background-color: var(--primary-color^);
echo   color: white;
echo }
echo.
echo .btn-primary:hover {
echo   background-color: #008a99;
echo   transform: translateY(-2px^);
echo   box-shadow: var(--shadow-md^);
echo }
echo.
echo .btn-secondary {
echo   background-color: var(--bg-light^);
echo   color: var(--text-primary^);
echo   border: 1px solid var(--border-color^);
echo }
echo.
echo .btn-secondary:hover {
echo   background-color: var(--bg-secondary^);
echo   transform: translateY(-2px^);
echo }
echo.
echo /* 表单元素 */
echo .formula-input {
echo   display: flex;
echo   flex-direction: column;
echo   gap: var(--spacing-md^);
echo }
echo.
echo .formula-name-input {
echo   padding: var(--spacing-sm^);
echo   background-color: var(--bg-dark^);
echo   border: 1px solid var(--border-color^);
echo   border-radius: var(--border-radius^);
echo   color: var(--text-primary^);
echo   font-size: 0.9rem;
echo }
echo.
echo .formula-name-input:focus {
echo   outline: none;
echo   border-color: var(--primary-color^);
echo   box-shadow: 0 0 0 2px rgba(0, 170, 187, 0.2^);
echo }
echo.
echo .edit-textarea {
echo   width: 100%;
echo   min-height: 200px;
echo   padding: var(--spacing-md^);
echo   background-color: var(--bg-dark^);
echo   border: 1px solid var(--border-color^);
echo   border-radius: var(--border-radius^);
echo   color: var(--text-primary^);
echo   font-family: monospace;
echo   font-size: 0.9rem;
echo   line-height: 1.5;
echo   resize: vertical;
echo }
echo.
echo .edit-textarea:focus {
echo   outline: none;
echo   border-color: var(--primary-color^);
echo   box-shadow: 0 0 0 2px rgba(0, 170, 187, 0.2^);
echo }
echo.
echo .edit-actions {
echo   display: flex;
echo   gap: var(--spacing-sm^);
echo   align-items: center;
echo }
echo.
echo /* 公式容器 */
echo .formula-container {
echo   display: flex;
echo   flex-direction: column;
echo   gap: var(--spacing-md^);
echo }
echo.
echo .formula-item {
echo   background-color: var(--bg-dark^);
echo   border: 1px solid var(--border-color^);
echo   border-radius: var(--border-radius^);
echo   padding: var(--spacing-md^);
echo   transition: all 0.3s ease;
echo }
echo.
echo .formula-item:hover {
echo   border-color: var(--primary-color^);
echo   box-shadow: var(--shadow-sm^);
echo }
echo.
echo .formula-header {
echo   display: flex;
echo   justify-content: space-between;
echo   align-items: center;
echo   margin-bottom: var(--spacing-sm^);
echo }
echo.
echo .formula-name {
echo   font-weight: bold;
echo   color: var(--accent-color^);
echo   font-size: 1.1rem;
echo }
echo.
echo .formula-actions {
echo   display: flex;
echo   gap: var(--spacing-xs^);
echo }
echo.
echo .formula-content {
echo   background-color: var(--bg-secondary^);
echo   padding: var(--spacing-sm^);
echo   border-radius: var(--border-radius^);
echo   font-family: monospace;
echo   font-size: 0.85rem;
echo   line-height: 1.4;
echo   white-space: pre-wrap;
echo   word-break: break-word;
echo }
echo.
echo /* 测试页面样式 */
echo .test-section {
echo   background-color: var(--card-bg^);
echo   border-radius: var(--border-radius^);
echo   padding: var(--spacing-lg^);
echo   margin-bottom: var(--spacing-md^);
echo   box-shadow: var(--shadow-md^);
echo }
echo.
echo .test-result {
echo   margin-top: var(--spacing-md^);
echo   padding: var(--spacing-md^);
echo   background-color: var(--bg-dark^);
echo   border-radius: var(--border-radius^);
echo   border: 1px solid var(--border-color^);
echo   font-family: monospace;
echo   font-size: 0.9rem;
echo   white-space: pre-wrap;
echo }
echo.
echo /* 滚动条样式 */
echo ::-webkit-scrollbar {
echo   width: 8px;
echo   height: 8px;
echo }
echo.
echo ::-webkit-scrollbar-track {
echo   background: var(--bg-dark^);
echo   border-radius: 4px;
echo }
echo.
echo ::-webkit-scrollbar-thumb {
echo   background: var(--border-color^);
echo   border-radius: 4px;
echo }
echo.
echo ::-webkit-scrollbar-thumb:hover {
echo   background: var(--text-muted^);
echo }
) > app\web\css\style.css

REM 创建 app/web/js/minidb.js
(
echo /**
echo  * MiniDB - 轻量级本地存储封装
echo  * 提供简单的数据存储和检索功能
echo  */
echo class MiniDB {
echo     constructor(dbName = 'minidb'^) {
echo         this.dbName = dbName;
echo         this.prefix = `${dbName}_`;
echo     }
echo.
echo     /**
echo      * 保存数据到本地存储
echo      * @param {string} key - 数据键名
echo      * @param {any} value - 要保存的数据
echo      */
echo     set(key, value^) {
echo         try {
echo             const serializedValue = JSON.stringify(value^);
echo             localStorage.setItem(this.prefix + key, serializedValue^);
echo             return true;
echo         } catch (error^) {
echo             console.error('MiniDB 保存数据失败:', error^);
echo             return false;
echo         }
echo     }
echo.
echo     /**
echo      * 从本地存储获取数据
echo      * @param {string} key - 数据键名
echo      * @param {any} defaultValue - 默认值
echo      * @returns {any} 获取的数据或默认值
echo      */
echo     get(key, defaultValue = null^) {
echo         try {
echo             const item = localStorage.getItem(this.prefix + key^);
echo             return item ? JSON.parse(item^) : defaultValue;
echo         } catch (error^) {
echo             console.error('MiniDB 获取数据失败:', error^);
echo             return defaultValue;
echo         }
echo     }
echo.
echo     /**
echo      * 删除指定键的数据
echo      * @param {string} key - 要删除的数据键名
echo      */
echo     remove(key^) {
echo         localStorage.removeItem(this.prefix + key^);
echo     }
echo.
echo     /**
echo      * 清空所有数据
echo      */
echo     clear(^) {
echo         const keys = Object.keys(localStorage^);
echo         keys.forEach(key =^> {
echo             if (key.startsWith(this.prefix^)^) {
echo                 localStorage.removeItem(key^);
echo             }
echo         }^);
echo     }
echo.
echo     /**
echo      * 获取所有键名
echo      * @returns {Array} 所有键名数组
echo      */
echo     keys(^) {
echo         const keys = Object.keys(localStorage^);
echo         return keys
echo             .filter(key =^> key.startsWith(this.prefix^)^)
echo             .map(key =^> key.substring(this.prefix.length^)^);
echo     }
echo.
echo     /**
echo      * 检查是否存在指定键
echo      * @param {string} key - 要检查的键名
echo      * @returns {boolean} 是否存在
echo      */
echo     has(key^) {
echo         return localStorage.getItem(this.prefix + key^) !== null;
echo     }
echo }
echo.
echo // 导出 MiniDB 类
echo window.MiniDB = MiniDB;
) > app\web\js\minidb.js

REM 创建 app/web/js/app.js
(
echo /**
echo  * 喵咒·AI Spellbook 主应用逻辑
echo  */
echo.
echo // 初始化数据库
echo const db = new MiniDB('aispellbook'^);
echo.
echo // 应用状态
echo let formulas = [];
echo let currentEditingId = null;
echo.
echo /**
echo  * 应用初始化
echo  */
echo function initApp(^) {
echo     console.log('🐱 喵咒·AI Spellbook 启动中...'^);
echo     loadFormulas(^);
echo     renderFormulas(^);
echo     setupEventListeners(^);
echo     console.log('✅ 应用初始化完成'^);
echo }
echo.
echo /**
echo  * 设置事件监听器
echo  */
echo function setupEventListeners(^) {
echo     // 监听回车键快速保存
echo     document.getElementById('formulaName'^).addEventListener('keypress', function(e^) {
echo         if (e.key === 'Enter'^) {
echo             saveFormula(^);
echo         }
echo     }^);
echo.
echo     // 监听 Ctrl+S 快速保存
echo     document.addEventListener('keydown', function(e^) {
echo         if (e.ctrlKey ^&^& e.key === 's'^) {
echo             e.preventDefault(^);
echo             saveFormula(^);
echo         }
echo     }^);
echo }
echo.
echo /**
echo  * 从本地存储加载公式
echo  */
echo function loadFormulas(^) {
echo     formulas = db.get('formulas', []^);
echo     console.log(`📚 加载了 ${formulas.length} 个公式`^);
echo }
echo.
echo /**
echo  * 保存公式到本地存储
echo  */
echo function saveFormulasToStorage(^) {
echo     db.set('formulas', formulas^);
echo }
echo.
echo /**
echo  * 保存新公式或更新现有公式
echo  */
echo function saveFormula(^) {
echo     const nameInput = document.getElementById('formulaName'^);
echo     const contentInput = document.getElementById('formulaContent'^);
echo.
echo     const name = nameInput.value.trim(^);
echo     const content = contentInput.value.trim(^);
echo.
echo     if (!name^) {
echo         alert('请输入公式名称！'^);
echo         nameInput.focus(^);
echo         return;
echo     }
echo.
echo     if (!content^) {
echo         alert('请输入公式内容！'^);
echo         contentInput.focus(^);
echo         return;
echo     }
echo.
echo     const now = new Date(^).toISOString(^);
echo.
echo     if (currentEditingId^) {
echo         // 更新现有公式
echo         const index = formulas.findIndex(f =^> f.id === currentEditingId^);
echo         if (index !== -1^) {
echo             formulas[index] = {
echo                 ...formulas[index],
echo                 name,
echo                 content,
echo                 updatedAt: now
echo             };
echo             console.log(`📝 更新公式: ${name}`^);
echo         }
echo         currentEditingId = null;
echo     } else {
echo         // 创建新公式
echo         const newFormula = {
echo             id: generateId(^),
echo             name,
echo             content,
echo             createdAt: now,
echo             updatedAt: now
echo         };
echo         formulas.unshift(newFormula^);
echo         console.log(`✨ 创建新公式: ${name}`^);
echo     }
echo.
echo     saveFormulasToStorage(^);
echo     clearFormula(^);
echo     renderFormulas(^);
echo     showNotification('公式保存成功！', 'success'^);
echo }
echo.
echo /**
echo  * 清空表单
echo  */
echo function clearFormula(^) {
echo     document.getElementById('formulaName'^).value = '';
echo     document.getElementById('formulaContent'^).value = '';
echo     currentEditingId = null;
echo     console.log('🧹 表单已清空'^);
echo }
echo.
echo /**
echo  * 编辑公式
echo  */
echo function editFormula(id^) {
echo     const formula = formulas.find(f =^> f.id === id^);
echo     if (!formula^) return;
echo.
echo     document.getElementById('formulaName'^).value = formula.name;
echo     document.getElementById('formulaContent'^).value = formula.content;
echo     currentEditingId = id;
echo.
echo     // 滚动到编辑区域
echo     document.querySelector('.formula-builder'^).scrollIntoView({ behavior: 'smooth' }^);
echo     console.log(`✏️ 编辑公式: ${formula.name}`^);
echo }
echo.
echo /**
echo  * 删除公式
echo  */
echo function deleteFormula(id^) {
echo     const formula = formulas.find(f =^> f.id === id^);
echo     if (!formula^) return;
echo.
echo     if (confirm(`确定要删除公式 "${formula.name}" 吗？`^)^) {
echo         formulas = formulas.filter(f =^> f.id !== id^);
echo         saveFormulasToStorage(^);
echo         renderFormulas(^);
echo         console.log(`🗑️ 删除公式: ${formula.name}`^);
echo         showNotification('公式删除成功！', 'success'^);
echo     }
echo }
echo.
echo /**
echo  * 复制公式内容到剪贴板
echo  */
echo async function copyFormula(id^) {
echo     const formula = formulas.find(f =^> f.id === id^);
echo     if (!formula^) return;
echo.
echo     try {
echo         await navigator.clipboard.writeText(formula.content^);
echo         console.log(`📋 复制公式: ${formula.name}`^);
echo         showNotification('公式已复制到剪贴板！', 'success'^);
echo     } catch (error^) {
echo         console.error('复制失败:', error^);
echo         showNotification('复制失败，请手动复制', 'error'^);
echo     }
echo }
echo.
echo /**
echo  * 渲染公式列表
echo  */
echo function renderFormulas(^) {
echo     const container = document.getElementById('formulaContainer'^);
echo     
echo     if (formulas.length === 0^) {
echo         container.innerHTML = `
echo             ^<div style="text-align: center; color: var(--text-muted^); padding: var(--spacing-xl^);"^>
echo                 ^<p^>还没有保存任何公式^</p^>
echo                 ^<p^>开始创建您的第一个AI提示词公式吧！^</p^>
echo             ^</div^>
echo         `;
echo         return;
echo     }
echo.
echo     container.innerHTML = formulas.map(formula =^> `
echo         ^<div class="formula-item"^>
echo             ^<div class="formula-header"^>
echo                 ^<span class="formula-name"^>${escapeHtml(formula.name^)^}^</span^>
echo                 ^<div class="formula-actions"^>
echo                     ^<button onclick="copyFormula('${formula.id}'^)" class="btn btn-secondary" title="复制"^>📋^</button^>
echo                     ^<button onclick="editFormula('${formula.id}'^)" class="btn btn-secondary" title="编辑"^>✏️^</button^>
echo                     ^<button onclick="deleteFormula('${formula.id}'^)" class="btn btn-secondary" title="删除"^>🗑️^</button^>
echo                 ^</div^>
echo             ^</div^>
echo             ^<div class="formula-content"^>${escapeHtml(formula.content^)^}^</div^>
echo             ^<div style="font-size: 0.8rem; color: var(--text-muted^); margin-top: var(--spacing-sm^);"^>
echo                 创建时间: ${formatDate(formula.createdAt^)^}
echo                 ${formula.updatedAt !== formula.createdAt ? ` | 更新时间: ${formatDate(formula.updatedAt^)^}` : ''}
echo             ^</div^>
echo         ^</div^>
echo     `^).join('''^);
echo }
echo.
echo /**
echo  * 生成唯一ID
echo  */
echo function generateId(^) {
echo     return Date.now(^).toString(36^) + Math.random(^).toString(36^).substr(2^);
echo }
echo.
echo /**
echo  * 转义HTML字符
echo  */
echo function escapeHtml(text^) {
echo     const div = document.createElement('div'^);
echo     div.textContent = text;
echo     return div.innerHTML;
echo }
echo.
echo /**
echo  * 格式化日期
echo  */
echo function formatDate(dateString^) {
echo     const date = new Date(dateString^);
echo     return date.toLocaleString('zh-CN'^);
echo }
echo.
echo /**
echo  * 显示通知消息
echo  */
echo function showNotification(message, type = 'info'^) {
echo     // 简单的通知实现
echo     const notification = document.createElement('div'^);
echo     notification.textContent = message;
echo     notification.style.cssText = `
echo         position: fixed;
echo         top: 20px;
echo         right: 20px;
echo         padding: 12px 20px;
echo         background-color: ${type === 'success' ? 'var(--success-color^)' : type === 'error' ? 'var(--error-color^)' : 'var(--primary-color^)'^};
echo         color: white;
echo         border-radius: var(--border-radius^);
echo         box-shadow: var(--shadow-md^);
echo         z-index: 1000;
echo         animation: slideIn 0.3s ease;
echo     `;
echo.
echo     document.body.appendChild(notification^);
echo.
echo     setTimeout(^(^) =^> {
echo         notification.style.animation = 'slideOut 0.3s ease';
echo         setTimeout(^(^) =^> {
echo             document.body.removeChild(notification^);
echo         }, 300^);
echo     }, 3000^);
echo }
echo.
echo // 添加动画样式
echo const style = document.createElement('style'^);
echo style.textContent = `
echo     @keyframes slideIn {
echo         from { transform: translateX(100%^); opacity: 0; }
echo         to { transform: translateX(0^); opacity: 1; }
echo     }
echo     @keyframes slideOut {
echo         from { transform: translateX(0^); opacity: 1; }
echo         to { transform: translateX(100%^); opacity: 0; }
echo     }
echo `;
echo document.head.appendChild(style^);
echo.
echo // 页面加载完成后初始化应用
echo document.addEventListener('DOMContentLoaded', initApp^);
) > app\web\js\app.js

REM 创建 app/web/js/test.js
(
echo /**
echo  * 测试页面逻辑
echo  */
echo.
echo /**
echo  * 测试 API 连接
echo  */
echo async function testAPI(^) {
echo     const resultDiv = document.getElementById('testResult'^);
echo     resultDiv.textContent = '正在测试 API 连接...';
echo.
echo     try {
echo         const response = await fetch('/api/test'^);
echo         const data = await response.json(^);
echo         
echo         resultDiv.innerHTML = `
echo             ^<strong^>API 测试结果:^</strong^>
echo             状态: ${response.ok ? '✅ 成功' : '❌ 失败'}
echo             状态码: ${response.status}
echo             响应数据: ${JSON.stringify(data, null, 2^)^}
echo         `;
echo     } catch (error^) {
echo         resultDiv.innerHTML = `
echo             ^<strong^>API 测试结果:^</strong^>
echo             状态: ❌ 连接失败
echo             错误信息: ${error.message}
echo         `;
echo     }
echo }
echo.
echo /**
echo  * 测试数据库连接
echo  */
echo async function testDatabase(^) {
echo     const resultDiv = document.getElementById('dbTestResult'^);
echo     resultDiv.textContent = '正在测试数据库连接...';
echo.
echo     try {
echo         const response = await fetch('/api/test/database'^);
echo         const data = await response.json(^);
echo         
echo         resultDiv.innerHTML = `
echo             ^<strong^>数据库测试结果:^</strong^>
echo             状态: ${response.ok ? '✅ 成功' : '❌ 失败'}
echo             状态码: ${response.status}
echo             响应数据: ${JSON.stringify(data, null, 2^)^}
echo         `;
echo     } catch (error^) {
echo         resultDiv.innerHTML = `
echo             ^<strong^>数据库测试结果:^</strong^>
echo             状态: ❌ 连接失败
echo             错误信息: ${error.message}
echo         `;
echo     }
echo }
echo.
echo console.log('🧪 测试页面已加载'^);
) > app\web\js\test.js

REM 创建 app/backend/server.js
(
echo /**
echo  * 喵咒·AI Spellbook 后端服务器
echo  */
echo.
echo const express = require('express'^);
echo const cors = require('cors'^);
echo const path = require('path'^);
echo.
echo // 导入路由
echo const apiRoutes = require('./routes/api'^);
echo const testRoutes = require('./routes/test'^);
echo.
echo const app = express(^);
echo const PORT = process.env.PORT ^|^| 3000;
echo.
echo // 中间件配置
echo app.use(cors(^)^);
echo app.use(express.json({ limit: '10mb' }^)^);
echo app.use(express.urlencoded({ extended: true }^)^);
echo.
echo // 请求日志中间件
echo app.use(^(req, res, next^) =^> {
echo     console.log(`${new Date(^).toISOString(^)^} - ${req.method} ${req.path}`^);
echo     next(^);
echo }^);
echo.
echo // 路由配置
echo app.use('/api', apiRoutes^);
echo app.use('/api/test', testRoutes^);
echo.
echo // 健康检查端点
echo app.get('/health', ^(req, res^) =^> {
echo     res.json({
echo         status: 'healthy',
echo         timestamp: new Date(^).toISOString(^),
echo         uptime: process.uptime(^)
echo     }^);
echo }^);
echo.
echo // 错误处理中间件
echo app.use(^(error, req, res, next^) =^> {
echo     console.error('服务器错误:', error^);
echo     res.status(500^).json({
echo         success: false,
echo         message: '服务器内部错误',
echo         error: process.env.NODE_ENV === 'development' ? error.message : undefined
echo     }^);
echo }^);
echo.
echo // 404 处理
echo app.use(^(req, res^) =^> {
echo     res.status(404^).json({
echo         success: false,
echo         message: '接口不存在'
echo     }^);
echo }^);
echo.
echo // 启动服务器
echo app.listen(PORT, ^(^) =^> {
echo     console.log(`🚀 喵咒·AI Spellbook 后端服务启动成功！`^);
echo     console.log(`📡 服务地址: http://localhost:${PORT}`^);
echo     console.log(`🕒 启动时间: ${new Date(^).toLocaleString('zh-CN'^)^}`^);
echo }^);
echo.
echo // 优雅关闭
echo process.on('SIGTERM', ^(^) =^> {
echo     console.log('🛑 收到 SIGTERM 信号，正在关闭服务器...'^);
echo     process.exit(0^);
echo }^);
echo.
echo process.on('SIGINT', ^(^) =^> {
echo     console.log('🛑 收到 SIGINT 信号，正在关闭服务器...'^);
echo     process.exit(0^);
echo }^);
) > app\backend\server.js

REM 创建 app/backend/routes/api.js
(
echo /**
echo  * API 路由处理
echo  */
echo.
echo const express = require('express'^);
echo const router = express.Router(^);
echo.
echo // 导入工具函数
echo const { validateData } = require('../utils/dataValidator'^);
echo const { readFile, writeFile } = require('../utils/fileHandler'^);
echo.
echo /**
echo  * 获取所有公式
echo  */
echo router.get('/formulas', async ^(req, res^) =^> {
echo     try {
echo         const formulas = await readFile('formulas.json', []^);
echo         res.json({
echo             success: true,
echo             data: formulas,
echo             count: formulas.length
echo         }^);
echo     } catch (error^) {
echo         console.error('获取公式列表失败:', error^);
echo         res.status(500^).json({
echo             success: false,
echo             message: '获取公式列表失败'
echo         }^);
echo     }
echo }^);
echo.
echo /**
echo  * 创建新公式
echo  */
echo router.post('/formulas', async ^(req, res^) =^> {
echo     try {
echo         const { name, content } = req.body;
echo.
echo         // 数据验证
echo         const validation = validateData({ name, content }, {
echo             name: { required: true, type: 'string', minLength: 1 },
echo             content: { required: true, type: 'string', minLength: 1 }
echo         }^);
echo.
echo         if (!validation.isValid^) {
echo             return res.status(400^).json({
echo                 success: false,
echo                 message: '数据验证失败',
echo                 errors: validation.errors
echo             }^);
echo         }
echo.
echo         const formulas = await readFile('formulas.json', []^);
echo         
echo         const newFormula = {
echo             id: Date.now(^).toString(36^) + Math.random(^).toString(36^).substr(2^),
echo             name: name.trim(^),
echo             content: content.trim(^),
echo             createdAt: new Date(^).toISOString(^),
echo             updatedAt: new Date(^).toISOString(^)
echo         };
echo.
echo         formulas.unshift(newFormula^);
echo         await writeFile('formulas.json', formulas^);
echo.
echo         res.status(201^).json({
echo             success: true,
echo             message: '公式创建成功',
echo             data: newFormula
echo         }^);
echo     } catch (error^) {
echo         console.error('创建公式失败:', error^);
echo         res.status(500^).json({
echo             success: false,
echo             message: '创建公式失败'
echo         }^);
echo     }
echo }^);
echo.
echo /**
echo  * 更新公式
echo  */
echo router.put('/formulas/:id', async ^(req, res^) =^> {
echo     try {
echo         const { id } = req.params;
echo         const { name, content } = req.body;
echo.
echo         // 数据验证
echo         const validation = validateData({ name, content }, {
echo             name: { required: true, type: 'string', minLength: 1 },
echo             content: { required: true, type: 'string', minLength: 1 }
echo         }^);
echo.
echo         if (!validation.isValid^) {
echo             return res.status(400^).json({
echo                 success: false,
echo                 message: '数据验证失败',
echo                 errors: validation.errors
echo             }^);
echo         }
echo.
echo         const formulas = await readFile('formulas.json', []^);
echo         const index = formulas.findIndex(f =^> f.id === id^);
echo.
echo         if (index === -1^) {
echo             return res.status(404^).json({
echo                 success: false,
echo                 message: '公式不存在'
echo             }^);
echo         }
echo.
echo         formulas[index] = {
echo             ...formulas[index],
echo             name: name.trim(^),
echo             content: content.trim(^),
echo             updatedAt: new Date(^).toISOString(^)
echo         };
echo.
echo         await writeFile('formulas.json', formulas^);
echo.
echo         res.json({
echo             success: true,
echo             message: '公式更新成功',
echo             data: formulas[index]
echo         }^);
echo     } catch (error^) {
echo         console.error('更新公式失败:', error^);
echo         res.status(500^).json({
echo             success: false,
echo             message: '更新公式失败'
echo         }^);
echo     }
echo }^);
echo.
echo /**
echo  * 删除公式
echo  */
echo router.delete('/formulas/:id', async ^(req, res^) =^> {
echo     try {
echo         const { id } = req.params;
echo         const formulas = await readFile('formulas.json', []^);
echo         const index = formulas.findIndex(f =^> f.id === id^);
echo.
echo         if (index === -1^) {
echo             return res.status(404^).json({
echo                 success: false,
echo                 message: '公式不存在'
echo             }^);
echo         }
echo.
echo         const deletedFormula = formulas.splice(index, 1^)[0];
echo         await writeFile('formulas.json', formulas^);
echo.
echo         res.json({
echo             success: true,
echo             message: '公式删除成功',
echo             data: deletedFormula
echo         }^);
echo     } catch (error^) {
echo         console.error('删除公式失败:', error^);
echo         res.status(500^).json({
echo             success: false,
echo             message: '删除公式失败'
echo         }^);
echo     }
echo }^);
echo.
echo module.exports = router;
) > app\backend\routes\api.js

REM 创建 app/backend/routes/test.js
(
echo /**
echo  * 测试路由
echo  */
echo.
echo const express = require('express'^);
echo const router = express.Router(^);
echo.
echo /**
echo  * API 连接测试
echo  */
echo router.get('/', ^(req, res^) =^> {
echo     res.json({
echo         success: true,
echo         message: 'API 连接正常',
echo         timestamp: new Date(^).toISOString(^),
echo         server: '喵咒·AI Spellbook Backend',
echo         version: '1.0.0'
echo     }^);
echo }^);
echo.
echo /**
echo  * 数据库连接测试
echo  */
echo router.get('/database', async ^(req, res^) =^> {
echo     try {
echo         // 这里可以添加实际的数据库连接测试
echo         // 目前使用模拟测试
echo         const testResult = {
echo             connected: true,
echo             host: 'mysql.cloud.lazycat.app.aispellbook.lzcapp',
echo             port: 3306,
echo             database: 'LAZYCAT',
echo             user: 'LAZYCAT',
echo             timestamp: new Date(^).toISOString(^)
echo         };
echo.
echo         res.json({
echo             success: true,
echo             message: '数据库连接正常',
echo             data: testResult
echo         }^);
echo     } catch (error^) {
echo         res.status(500^).json({
echo             success: false,
echo             message: '数据库连接失败',
echo             error: error.message
echo         }^);
echo     }
echo }^);
echo.
echo /**
echo  * 系统信息测试
echo  */
echo router.get('/system', ^(req, res^) =^> {
echo     res.json({
echo         success: true,
echo         data: {
echo             nodeVersion: process.version,
echo             platform: process.platform,
echo             arch: process.arch,
echo             uptime: process.uptime(^),
echo             memory: process.memoryUsage(^),
echo             timestamp: new Date(^).toISOString(^)
echo         }
echo     }^);
echo }^);
echo.
echo module.exports = router;
) > app\backend\routes\test.js

REM 创建 app/backend/data/init-data.json
(
echo [
echo   {
echo     "id": "sample001",
echo     "name": "角色扮演公式",
echo     "content": "你是一个{角色}，具有{特征}的特点。请以{角色}的身份回答问题，保持{语言风格}的语言风格。",
echo     "createdAt": "2024-01-01T00:00:00.000Z",
echo     "updatedAt": "2024-01-01T00:00:00.000Z"
echo   },
echo   {
echo     "id": "sample002", 
echo     "name": "创意写作公式",
echo     "content": "请创作一个关于{主题}的{文体}，要求：\n1. 风格：{风格特点}\n2. 长度：{字数要求}\n3. 目标受众：{受众群体}\n4. 核心信息：{核心信息}",
echo     "createdAt": "2024-01-01T00:00:00.000Z",
echo     "updatedAt": "2024-01-01T00:00:00.000Z"
echo   },
echo   {
echo     "id": "sample003",
echo     "name": "问题分析公式", 
echo     "content": "请分析以下问题：{问题描述}\n\n分析框架：\n1. 问题定义：{问题本质}\n2. 影响因素：{关键因素}\n3. 解决方案：{解决思路}\n4. 实施建议：{具体建议}",
echo     "createdAt": "2024-01-01T00:00:00.000Z",
echo     "updatedAt": "2024-01-01T00:00:00.000Z"
echo   }
echo ]
) > app\backend\data\init-data.json

REM 创建 app/backend/data/default-settings.json
(
echo {
echo   "app": {
echo     "name": "喵咒·AI Spellbook",
echo     "version": "1.0.0",
echo     "description": "以表达公式的形式组合关键词句片段，形成更好的提示词"
echo   },
echo   "database": {
echo     "host": "mysql.cloud.lazycat.app.aispellbook.lzcapp",
echo     "port": 3306,
echo     "database": "LAZYCAT",
echo     "user": "LAZYCAT",
echo     "password": "LAZYCAT"
echo   },
echo   "server": {
echo     "port": 3000,
echo     "cors": true,
echo     "bodyLimit": "10mb"
echo   },
echo   "features": {
echo     "autoSave": true,
echo     "backup": true,
echo     "export": true,
echo     "import": true
echo   }
echo }
) > app\backend\data\default-settings.json

REM 创建 app/backend/utils/fileHandler.js
(
echo /**
echo  * 文件处理工具
echo  */
echo.
echo const fs = require('fs'^).promises;
echo const path = require('path'^);
echo.
echo // 数据目录路径
echo const DATA_DIR = path.join(__dirname, '../data'^);
echo.
echo /**
echo  * 确保数据目录存在
echo  */
echo async function ensureDataDir(^) {
echo     try {
echo         await fs.access(DATA_DIR^);
echo     } catch (error^) {
echo         await fs.mkdir(DATA_DIR, { recursive: true }^);
echo     }
echo }
echo.
echo /**
echo  * 读取JSON文件
echo  * @param {string} filename - 文件名
echo  * @param {any} defaultValue - 默认值
echo  * @returns {Promise^<any^>} 文件内容
echo  */
echo async function readFile(filename, defaultValue = null^) {
echo     try {
echo         await ensureDataDir(^);
echo         const filePath = path.join(DATA_DIR, filename^);
echo         const data = await fs.readFile(filePath, 'utf8'^);
echo         return JSON.parse(data^);
echo     } catch (error^) {
echo         if (error.code === 'ENOENT'^) {
echo             // 文件不存在，返回默认值
echo             return defaultValue;
echo         }
echo         throw error;
echo     }
echo }
echo.
echo /**
echo  * 写入JSON文件
echo  * @param {string} filename - 文件名
echo  * @param {any} data - 要写入的数据
echo  */
echo async function writeFile(filename, data^) {
echo     try {
echo         await ensureDataDir(^);
echo         const filePath = path.join(DATA_DIR, filename^);
echo         const jsonData = JSON.stringify(data, null, 2^);
echo         await fs.writeFile(filePath, jsonData, 'utf8'^);
echo     } catch (error^) {
echo         console.error(`写入文件 ${filename} 失败:`, error^);
echo         throw error;
echo     }
echo }
echo.
echo /**
echo  * 检查文件是否存在
echo  * @param {string} filename - 文件名
echo  * @returns {Promise^<boolean^>} 是否存在
echo  */
echo async function fileExists(filename^) {
echo     try {
echo         const filePath = path.join(DATA_DIR, filename^);
echo         await fs.access(filePath^);
echo         return true;
echo     } catch (error^) {
echo         return false;
echo     }
echo }
echo.
echo /**
echo  * 删除文件
echo  * @param {string} filename - 文件名
echo  */
echo async function deleteFile(filename^) {
echo     try {
echo         const filePath = path.join(DATA_DIR, filename^);
echo         await fs.unlink(filePath^);
echo     } catch (error^) {
echo         if (error.code !== 'ENOENT'^) {
echo             throw error;
echo         }
echo     }
echo }
echo.
echo /**
echo  * 备份文件
echo  * @param {string} filename - 文件名
echo  */
echo async function backupFile(filename^) {
echo     try {
echo         const filePath = path.join(DATA_DIR, filename^);
echo         const backupPath = path.join(DATA_DIR, `${filename}.backup.${Date.now(^)^}`^);
echo         await fs.copyFile(filePath, backupPath^);
echo         return backupPath;
echo     } catch (error^) {
echo         console.error(`备份文件 ${filename} 失败:`, error^);
echo         throw error;
echo     }
echo }
echo.
echo module.exports = {
echo     readFile,
echo     writeFile,
echo     fileExists,
echo     deleteFile,
echo     backupFile
echo };
) > app\backend\utils\fileHandler.js

REM 创建 app/backend/utils/dataValidator.js
(
echo /**
echo  * 数据验证工具
echo  */
echo.
echo /**
echo  * 验证数据
echo  * @param {object} data - 要验证的数据
echo  * @param {object} rules - 验证规则
echo  * @returns {object} 验证结果
echo  */
echo function validateData(data, rules^) {
echo     const errors = [];
echo     let isValid = true;
echo.
echo     for (const [field, rule] of Object.entries(rules^)^) {
echo         const value = data[field];
echo.
echo         // 必填验证
echo         if (rule.required ^&^& (value === undefined ^|^| value === null ^|^| value === ''^)^) {
echo             errors.push(`${field} 是必填字段`^);
echo             isValid = false;
echo             continue;
echo         }
echo.
echo         // 如果字段为空且不是必填，跳过其他验证
echo         if (value === undefined ^|^| value === null ^|^| value === ''^) {
echo             continue;
echo         }
echo.
echo         // 类型验证
echo         if (rule.type^) {
echo             if (!validateType(value, rule.type^)^) {
echo                 errors.push(`${field} 类型错误，期望 ${rule.type}`^);
echo                 isValid = false;
echo                 continue;
echo             }
echo         }
echo.
echo         // 字符串长度验证
echo         if (rule.type === 'string'^) {
echo             if (rule.minLength ^&^& value.length ^< rule.minLength^) {
echo                 errors.push(`${field} 长度不能少于 ${rule.minLength} 个字符`^);
echo                 isValid = false;
echo             }
echo             if (rule.maxLength ^&^& value.length ^> rule.maxLength^) {
echo                 errors.push(`${field} 长度不能超过 ${rule.maxLength} 个字符`^);
echo                 isValid = false;
echo             }
echo         }
echo.
echo         // 数字范围验证
echo         if (rule.type === 'number'^) {
echo             if (rule.min !== undefined ^&^& value ^< rule.min^) {
echo                 errors.push(`${field} 不能小于 ${rule.min}`^);
echo                 isValid = false;
echo             }
echo             if (rule.max !== undefined ^&^& value ^> rule.max^) {
echo                 errors.push(`${field} 不能大于 ${rule.max}`^);
echo                 isValid = false;
echo             }
echo         }
echo.
echo         // 正则表达式验证
echo         if (rule.pattern ^&^& rule.type === 'string'^) {
echo             if (!rule.pattern.test(value^)^) {
echo                 errors.push(`${field} 格式不正确`^);
echo                 isValid = false;
echo             }
echo         }
echo.
echo         // 枚举值验证
echo         if (rule.enum ^&^& !rule.enum.includes(value^)^) {
echo             errors.push(`${field} 必须是以下值之一: ${rule.enum.join(', '^)^}`^);
echo             isValid = false;
echo         }
echo.
echo         // 自定义验证函数
echo         if (rule.validator ^&^& typeof rule.validator === 'function'^) {
echo             const customResult = rule.validator(value^);
echo             if (customResult !== true^) {
echo                 errors.push(customResult ^|^| `${field} 验证失败`^);
echo                 isValid = false;
echo             }
echo         }
echo     }
echo.
echo     return {
echo         isValid,
echo         errors
echo     };
echo }
echo.
echo /**
echo  * 验证数据类型
echo  * @param {any} value - 要验证的值
echo  * @param {string} type - 期望的类型
echo  * @returns {boolean} 是否匹配类型
echo  */
echo function validateType(value, type^) {
echo     switch (type^) {
echo         case 'string':
echo             return typeof value === 'string';
echo         case 'number':
echo             return typeof value === 'number' ^&^& !isNaN(value^);
echo         case 'boolean':
echo             return typeof value === 'boolean';
echo         case 'array':
echo             return Array.isArray(value^);
echo         case 'object':
echo             return typeof value === 'object' ^&^& value !== null ^&^& !Array.isArray(value^);
echo         case 'email':
echo             return typeof value === 'string' ^&^& /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value^);
echo         case 'url':
echo             try {
echo                 new URL(value^);
echo                 return true;
echo             } catch {
echo                 return false;
echo             }
echo         case 'date':
echo             return value instanceof Date ^|^| !isNaN(Date.parse(value^)^);
echo         default:
echo             return true;
echo     }
echo }
echo.
echo /**
echo  * 清理和标准化数据
echo  * @param {object} data - 要清理的数据
echo  * @param {object} rules - 清理规则
echo  * @returns {object} 清理后的数据
echo  */
echo function sanitizeData(data, rules^) {
echo     const sanitized = {};
echo.
echo     for (const [field, rule] of Object.entries(rules^)^) {
echo         let value = data[field];
echo.
echo         if (value === undefined ^|^| value === null^) {
echo             if (rule.default !== undefined^) {
echo                 value = rule.default;
echo             } else {
echo                 continue;
echo             }
echo         }
echo.
echo         // 字符串清理
echo         if (rule.type === 'string' ^&^& typeof value === 'string'^) {
echo             if (rule.trim^) {
echo                 value = value.trim(^);
echo             }
echo             if (rule.toLowerCase^) {
echo                 value = value.toLowerCase(^);
echo             }
echo             if (rule.toUpperCase^) {
echo                 value = value.toUpperCase(^);
echo             }
echo         }
echo.
echo         // 数字转换
echo         if (rule.type === 'number' ^&^& typeof value === 'string'^) {
echo             const num = parseFloat(value^);
echo             if (!isNaN(num^)^) {
echo                 value = num;
echo             }
echo         }
echo.
echo         sanitized[field] = value;
echo     }
echo.
echo     return sanitized;
echo }
echo.
echo module.exports = {
echo     validateData,
echo     validateType,
echo     sanitizeData
echo };
) > app\backend\utils\dataValidator.js

REM 创建 app/backend/package.json
(
echo {
echo   "name": "aispellbook-backend",
echo   "version": "1.0.0",
echo   "description": "喵咒·AI Spellbook 后端服务",
echo   "main": "server.js",
echo   "scripts": {
echo     "start": "node server.js",
echo     "dev": "nodemon server.js",
echo     "test": "echo \"Error: no test specified\" && exit 1"
echo   },
echo   "keywords": [
echo     "ai",
echo     "spellbook",
echo     "prompt",
echo     "lazycat"
echo   ],
echo   "author": "LazyCAT Team",
echo   "license": "MIT",
echo   "dependencies": {
echo     "express": "^4.18.2",
echo     "cors": "^2.8.5"
echo   },
echo   "devDependencies": {
echo     "nodemon": "^3.0.1"
echo   },
echo   "engines": {
echo     "node": "^>=16.0.0"
echo   }
echo }
) > app\backend\package.json

REM 创建 app/config/database.js
(
echo /**
echo  * 数据库配置文件
echo  */
echo.
echo module.exports = {
echo   // 懒猫微服 MySQL 数据库配置
echo   mysql: {
echo     host: 'mysql.cloud.lazycat.app.aispellbook.lzcapp',
echo     port: 3306,
echo     user: 'LAZYCAT',
echo     password: 'LAZYCAT',
echo     database: 'LAZYCAT',
echo     charset: 'utf8mb4',
echo     timezone: '+08:00',
echo     acquireTimeout: 60000,
echo     timeout: 60000,
echo     reconnect: true,
echo     pool: {
echo       min: 0,
echo       max: 10,
echo       acquire: 30000,
echo       idle: 10000
echo     }
echo   },
echo.
echo   // 开发环境配置
echo   development: {
echo     host: 'localhost',
echo     port: 3306,
echo     user: 'root',
echo     password: '',
echo     database: 'aispellbook_dev'
echo   },
echo.
echo   // 测试环境配置
echo   test: {
echo     host: 'localhost',
echo     port: 3306,
echo     user: 'root',
echo     password: '',
echo     database: 'aispellbook_test'
echo   }
echo };
) > app\config\database.js

echo.
echo ✅ 喵咒·AI Spellbook 项目结构创建完成！
echo.
echo 📁 项目目录: pormula/
echo 🌐 前端文件: app/web/
echo ⚙️ 后端服务: app/backend/
echo 📋 配置文件: lzc-build.yml, lzc-manifest.yml
echo.
echo 🚀 下一步操作:
echo 1. cd pormula
echo 2. cd app/backend ^&^& npm install
echo 3. 使用 lzc-cli 进行开发和部署
echo.
echo 🎉 项目创建成功！开始您的 AI 提示词公式之旅吧！

cd ..
pause